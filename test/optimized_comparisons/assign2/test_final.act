import syn;

defproc toplevel (a1of1 go)
{
/* Initialize chp vars */
  syn::var_init_false var_v;
  syn::var_init_false var_y;
  syn::var_init_false var_x;
  syn::var_init_false var_z;
  syn::var_init_false loop0000[4];
  syn::var_init_false sel0000[4];

  /* ... printchpstmt 3 c_0...*/
  /* semicolon */
  a1of1 c_0;

  /* printing composite statement: ns=-1 */
  /* ... printchpstmt 0 c_a=0, c_b=48, ns=-1... for left side*/
  /* semicolon */
/* yay we need a sequencer here, ret=1 */
  a1of1 c_1;
  syn::fullseq s_0;
  c_1 = s_0.go;

  /* printing composite statement: ns=1 */
  /* ... printchpstmt 0 c_a=1, c_b=48, ns=1... for left side*/
  /* assign */
  syn::var_init_true const_1;
  syn::expr_var e_1;
  e_1.v = const_1.v;
  a1of1 c_2;
  /* testpoint 1 */
  syn::fullseq s_2;
  c_2.r = s_2.go.r;
  syn::recv rtv_2;
  syn::expr_var e_2;
  syn::var_init_false tv_2;
  tv_2.v = rtv_2.v;
  e_2.v = tv_2.v;
  s_2.r.r = e_1.go_r;
  s_2.r = rtv_2.go;
  e_1.out.t = rtv_2.in.t;
  e_1.out.f = rtv_2.in.f;
  s_2.go.a = e_2.go_r;
  syn::recv s_1;
  s_1.go = c_2;
  s_1.in.t = e_2.out.t;
  s_1.in.f = e_2.out.f;
  s_1.v = var_x.v;

  /* ... printchpstmt 0 c_a=1, c_b=2, ns=1... for RIGHT side*/
  syn::seq s_3;
  /* is this the place?? ns=1*/
  s_3.go = s_0.r;
  s_3.s1 = c_2;
  a1of1 c_3;
  s_3.s2 = c_3;

  /* printing composite statement: ns=1 */
  /* ... printchpstmt 0 c_a=3, c_b=2, ns=1... for left side*/
  /* assign */
  syn::var_init_false const_0;
  syn::expr_var e_3;
  e_3.v = const_0.v;
  a1of1 c_4;
  /* testpoint 1 */
  syn::fullseq s_5;
  c_4.r = s_5.go.r;
  syn::recv rtv_5;
  syn::expr_var e_4;
  syn::var_init_false tv_5;
  tv_5.v = rtv_5.v;
  e_4.v = tv_5.v;
  s_5.r.r = e_3.go_r;
  s_5.r = rtv_5.go;
  e_3.out.t = rtv_5.in.t;
  e_3.out.f = rtv_5.in.f;
  s_5.go.a = e_4.go_r;
  syn::recv s_4;
  s_4.go = c_4;
  s_4.in.t = e_4.out.t;
  s_4.in.f = e_4.out.f;
  s_4.v = var_y.v;

  /* ... printchpstmt 0 c_a=3, c_b=4, ns=1... for RIGHT side*/
  syn::seq s_6;
  /* is this the place?? ns=1*/
  s_6.go = c_3;
  s_6.s1 = c_4;
  a1of1 c_5;
  s_6.s2 = c_5;

  /* printing composite statement: ns=1 */
  /* ... printchpstmt 0 c_a=5, c_b=4, ns=1... for left side*/
  /* assign */
  syn::expr_var e_5;
  e_5.v = const_1.v;
  a1of1 c_6;
  /* testpoint 1 */
  syn::fullseq s_8;
  c_6.r = s_8.go.r;
  syn::recv rtv_8;
  syn::expr_var e_6;
  syn::var_init_false tv_8;
  tv_8.v = rtv_8.v;
  e_6.v = tv_8.v;
  s_8.r.r = e_5.go_r;
  s_8.r = rtv_8.go;
  e_5.out.t = rtv_8.in.t;
  e_5.out.f = rtv_8.in.f;
  s_8.go.a = e_6.go_r;
  syn::recv s_7;
  s_7.go = c_6;
  s_7.in.t = e_6.out.t;
  s_7.in.f = e_6.out.f;
  s_7.v = var_z.v;

  /* ... printchpstmt 0 c_a=5, c_b=6, ns=1... for RIGHT side*/
  syn::seq s_9;
  /* is this the place?? ns=1*/
  s_9.go = c_5;
  s_9.s1 = c_6;

  /* ... printchpstmt 2 c_6, ns=1...*/
  /* assign */
  syn::expr_var e_7;
  e_7.v = var_x.v;
  syn::expr_var e_8;
  e_8.v = var_z.v;
  /* testpoint 8 */
  e_8.go_r = e_7.go_r;
  syn::expr_and e_9;
  e_9.in1 = e_7.out;
  e_9.in2 = e_8.out;
  syn::expr_var e_10;
  e_10.v = var_y.v;
  /* testpoint 8 */
  e_10.go_r = e_7.go_r;
  syn::expr_or e_11;
  e_11.in1 = e_9.out;
  e_11.in2 = e_10.out;
  a1of1 c_7;
  /* testpoint 1 */
  syn::fullseq s_11;
  c_7.r = s_11.go.r;
  syn::recv rtv_11;
  syn::expr_var e_12;
  syn::var_init_false tv_11;
  tv_11.v = rtv_11.v;
  e_12.v = tv_11.v;
  s_11.r.r = e_7.go_r;
  s_11.r = rtv_11.go;
  e_11.out.t = rtv_11.in.t;
  e_11.out.f = rtv_11.in.f;
  s_11.go.a = e_12.go_r;
  syn::recv s_10;
  s_10.go = c_7;
  s_10.in.t = e_12.out.t;
  s_10.in.f = e_12.out.f;
  s_10.v = var_v.v;

  s_9.s2 = c_7;

  /* ... printchpstmt 0 c_a=0, c_b=1, ns=-1... for RIGHT side*/
  syn::seq s_12;
  /* is this the place?? ns=-1*/
  s_12.go = c_0;
  s_12.s1 = c_1;

  /* ... printchpstmt 2 c_1, ns=-1...*/
  /* assign */
  syn::expr_var e_13;
  e_13.v = const_0.v;
  a1of1 c_8;
  /* testpoint 1 */
  syn::fullseq s_14;
  c_8.r = s_14.go.r;
  syn::recv rtv_14;
  syn::expr_var e_14;
  syn::var_init_false tv_14;
  tv_14.v = rtv_14.v;
  e_14.v = tv_14.v;
  s_14.r.r = e_13.go_r;
  s_14.r = rtv_14.go;
  e_13.out.t = rtv_14.in.t;
  e_13.out.f = rtv_14.in.f;
  s_14.go.a = e_14.go_r;
  syn::recv s_13;
  s_13.go = c_8;
  s_13.in.t = e_14.out.t;
  s_13.in.f = e_14.out.f;
  s_13.v = var_x.v;

  s_12.s2 = c_8;

  go = c_0;
}

toplevel t;
